&focusin
 IsQuiet        =        -1             ! -2 verbose and including unconstrained cost functions; -1: verbose; 0: normal; 1: concise
 IsSymmetric    =        1              ! 0: no stellarator symmetry enforced; 1: plasma periodicity enforced; 2: coil periodicity enforced

 case_surface   =        0              ! 0: general VMEC-like format (Rbc, Rbs, Zbc, Zbs); 1: read axis for knots
 knotsurf       =        0.200D-00      ! minor plasma radius for knototrans, only valid for case surface = 1
 ellipticity    =        0.000D+00      ! ellipticity of plasma for knototrans, only valid for case surface = 1
 Nteta          =      128              ! poloidal number for discretizing the surface
 Nzeta          =      128              ! toroidal number for discretizing the surface

 case_init      =        1              ! -1: read coils.ext file; 0: read ext.focus file; 1: initialize with circular coils; 2: initialize with dipoles
 case_coils     =        1              ! 0: using piecewise linear representation; (not ready); 1: using Fourier series representation
 Ncoils         =        16             ! number of coils; only valid when case_init = 1
 init_current   =        1.000D+06      ! initial coil currents (Amper); only valid when case_init = 1
 init_radius    =        0.500D+00      ! initial coil radius   (meter); only valid when case_init = 1
 IsVaryCurrent  =        1              ! 0: all the currents   fixed; 1: currents   can be changed; overwritten by ext.focus
 IsVaryGeometry =        1              ! 0: all the geometries fixed; 1: geometries can be changed; overwritten by ext.focus
 NFcoil         =        4              ! number of Fourier harmonics representing the coils; overwritten by ext.focus
 Nseg           =      128              ! number of coil segments for discretizing; overwritten by ext.focus

 IsNormalize    =        1              ! 0: do not normalize coil parameters; 1: normalize; I = I/I0, x = x/R0; I0 & R0 are quadrtic mean values.
 IsNormWeight   =        1              ! 0: do not normalize the weights; 1: normalize the weights
 case_bnormal   =        1              ! 0: keep raw Bn error; 1: Bn residue normalized to local |B|
 case_length    =        1              ! 1: quadratic format, converging the target length; 2: exponential format, as short as possible
 weight_bnorm   =        1.000D+02      ! weight for real space Bn errors
 weight_bharm   =        0.000D+00      ! weight for Bnm harmonic errors
 weight_tflux   =        0.000D+00      ! weight for toroidal flux error
 target_tflux   =        0.000D+00      ! target for the toroidal flux
 weight_ttlen   =        0.100D-02      ! weight for coil length error
 target_length  =        3.500D+00      ! target value (or for normalization) of the coils length, if zero, automatically set to initial actual length
 weight_specw   =        0.000D+00      ! weight for spectral condensation error
 weight_cssep   =        0.010D+00      ! weight for coil-surface separation constraint
 weight_inorm   =        1.000D+00	! weight for normalization of current. Larger weight makes the derivatives more important.
 weight_gnorm   =        1.000D+00	! weight for normalization of geometric coefficients. Larger weight makes the derivatives more important.

 case_optimize  =        1              ! -2: check the 2nd derivatives (not ready); -1: check the 1st derivatives; 0: no optimizations performed; 1: optimizing using the gradient (DF and/or CG); 
 exit_tol       =        1.000D-04      ! Exit the optimizer if the percent change in the cost function over the last 5 steps is below this threshold

 DF_maxiter     =        0              ! maximum iterations allowed for using Differential Flow (DF)
 DF_xtol        =        1.000D-08      ! relative error for ODE solver
 DF_tausta      =        0.000D+00      ! starting value of τ. Usually 0.0 is a good idea
 DF_tauend      =        1.000D-00      ! ending value of τ. The larger value of τend − τsta, the more optimized

 CG_maxiter     =       10              ! maximum iterations allowed for using Conjugate Gradient (CG)
 CG_xtol        =        1.000D-08      ! the stopping criteria of finding minimum; if |dχ2/dX| < CG xtol, exit the optimization
 CG_wolfe_c1    =        0.1            ! c1 value in the strong wolfe condition for line search, (0.0, 0.5) 
 CG_wolfe_c2    =        0.9            ! c2 value in the strong wolfe condition for line search; 0 < c1 < c2 < 1

 LM_maxiter     =        0             ! maximum iterations allowed for using Levenberg-Marquard (LM)
 LM_xtol        =        1.000D-08      ! if the relative error between two consecutivec iterates is at most xtol, the optimization terminates
 LM_ftol        =        1.000D-08      ! if both the actual and predicted relative reductions in the sum of squares are at most ftol, the optimization terminates;
 LM_factor      =      100.0            ! the initial step bound, which is set to the product of factor and the euclidean norm of diag*x if nonzero

 case_postproc  =        3              ! 0: no extra post-processing; 1: evaluate the current coils; 2: write SPEC file; 3: perform Poincare plots; 4: calculates |B| Fourier harmonics in Boozer coordinates
 save_freq      =        1              ! frequency for writing output files; should be positive
 save_coils     =        1              ! flag for indicating whether write example.focus and example.coils
 save_harmonics =        0              ! flag for indicating whether write example.harmonics
 save_filaments =        0              ! flag for indicating whether write .example.filaments.xxxxxx

 update_plasma  =  0                    ! if == 1, write new example.plasma file with updated Bn harmonics.
 pp_phi         =  0.000D+00		! toroidal plane for poincare plots, cylindrical angle phi = pp_phi*Pi
 pp_raxis       =  3.000D+00       	! pp_raxis, pp_zaxis are initial guesses for magnetic axis at the specified toroidal angle
 pp_zaxis       =  0.000D+00            ! If both zero, FOCUS will take the geometric center as initial guess
 pp_rmax        =  0.000D+00		! pp_rmax, pp_zmax are the upper bounds for performing fieldline tracing
 pp_zmax        =  0.000D+00		! FOCUS will start follow fieldlines at interpolation between (pp_raxis, pp_zaxis) and (pp_rmax, pp_zmax)
 pp_ns          =  10			! number of following fieldlines
 pp_maxiter     =  1000			! number of periods for each fieldline following
 pp_xtol        =  1.000D-06		! tolarence of ODE solver during fieldline fowllowing

/
